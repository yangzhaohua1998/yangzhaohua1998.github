<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>(01 day)二进制求和(Binary Sum)</title>
      <link href="/2020/06/25/01-day-%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B1%82%E5%92%8C-Binary-Sum/"/>
      <url>/2020/06/25/01-day-%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B1%82%E5%92%8C-Binary-Sum/</url>
      
        <content type="html"><![CDATA[<h1 id="01-day-二进制求和-Binary-Sum"><a href="#01-day-二进制求和-Binary-Sum" class="headerlink" title="(01 day)二进制求和(Binary Sum)"></a>(01 day)二进制求和(Binary Sum)</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>&emsp;给你两个二进制字符串，返回它们的和（用二进制表示）。<br>输入为 非空 字符串且只包含数字 1 和 0</p><p>示例：  </p><pre><code class="c">input: a = &quot;11&quot;, b = &quot;1&quot;</code></pre><pre><code class="c">output: &quot;100&quot;</code></pre><p>&emsp; 首先想到的是字符串-&gt;十进制数-&gt;求和-&gt;二进制数。但是想到可能使用整数精度不够（对于转换的函数调用也不是很熟练），所以就使用了适合于长度较大的字符串相加计算的方法。类似于大数相加。</p><p>&ensp;11<br>&ensp;&ensp;1<br>——<br>100</p><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;malloc.h&gt;//char res[100];char* addBinary(char* a, char* b);int main(){    char a[100], b[100];    scanf(&quot;%s %s&quot;, a, b);    printf(&quot;%s&quot;, addBinary(a, b));    return 0;}void reserve(char* a){    int len = strlen(a);    for (int i = 0; i &lt; len / 2; i++)    {        char t;        t = a[i];        a[i] = a[len - 1 - i];        a[len - 1 - i] = t;    }}char* addBinary(char* a, char* b){    char* res;    //char res[100];    int temp = 0, add = 0, carry = 0;    res = (char*)malloc(sizeof(char) * 100);    if (strlen(a) &lt; strlen(b)) //保证函数中a的位数大或等于b    {        return addBinary(b, a);    }    reserve(a);//a，b字符反转    reserve(b);    for (int i = 0; i &lt; strlen(a); i++)    {        if (i &lt; strlen(b))//处理ab相加        {            add = carry + a[i] + b[i] - 2 * &#39;0&#39;; //进位和a[i],b[i]相加        }        else//处理a与进位相加        {            add = carry + a[i] - &#39;0&#39;;        }        temp = add % 2;        carry = add / 2;//进位        res[i] = temp + &#39;0&#39;;    }    if (carry==1)    {        res[strlen(a)] = &#39;1&#39;;        res[strlen(a)+1] = &#39;\0&#39;;    }    else    {        res[strlen(a)] = &#39;\0&#39;;    }    reserve(res);    return res;}</code></pre><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>时间复杂度：只遍历了a，b数组一遍。<em>n = max{ |a|   , |b| }</em></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>利用Java和python自带的高精度方法就可以进行直接运算，不过Java中：</p><ul><li>字符超过32位不能使用 Integer</li><li>字符超过65位不能使用 Long</li><li>超过500000001位不能使用BigInteger  </li></ul><p><code>Java</code></p><pre><code class="java">class Solution {    public String addBinary(String a, String b) {        return Integer.toBinaryString(            Integer.parseInt(a, 2) + Integer.parseInt(b, 2)        );    }}</code></pre><p><code>Python</code></p><pre><code class="python">class Solution:    def addBinary(self, a, b) -&gt; str:        return &#39;{0:b}&#39;.format(int(a, 2) + int(b, 2))</code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> easy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/06/22/hello-world/"/>
      <url>/2020/06/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
